<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/blueprint"
	xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf" xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xsi:schemaLocation=" 
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
       http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

	<cxf:rsServer id="vehicleInfoEndpoint" address="/vehicleinfo"
		serviceClass="com.idep.service.vehicleinfo.VehicleInfo"
		loggingFeatureEnabled="true">
		<cxf:providers>
			<bean
				class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />
		</cxf:providers>
	</cxf:rsServer>
	<bean id="VehicleInfoReqProcessor" class="com.idep.service.vehicleinfo.processor.VehicleInfoReqProcessor"></bean>
	<bean id="VehicleInfoRequest" class="com.idep.service.vehicleinfo.impl.VehicleInfoRequest"></bean>
	<bean id="VehicleInfoResponseHandler" class="com.idep.service.vehicleinfo.impl.VehicleInfoResponseHandler"></bean>
	<bean id="VehicleInfoResponseFormatter" class="com.idep.service.vehicleinfo.impl.VehicleInfoResponseFormatter"></bean>
	<bean id="VehicleInfoResponseValidator" class="com.idep.service.vehicleinfo.res.VehicleInfoResponseValidator"></bean>
	<bean id="DBStoreReqResProcessor" class="com.idep.service.vehicleinfo.db.DBStoreReqResProcessor"></bean>
	<bean id="VehicleInfoResposneProcessor" class="com.idep.service.vehicleinfo.res.VehicleInfoResposneProcessor"></bean>
	<bean id="GetOurMasterData" class="com.idep.service.vehicleinfo.GetOurMasterData"></bean>

	<!-- Reduces the graceful shutdown time from 300 to 30 seconds. -->
	<bean id="vehicleInfoShutdownStrategy" class="org.apache.camel.impl.DefaultShutdownStrategy">
		<property name="timeout" value="15" />
	</bean>

 <cm:property-placeholder persistent-id="AMQCustomProperties"> 
 </cm:property-placeholder> 
<bean id="jmsConnectionFactory"
   class="org.apache.activemq.ActiveMQConnectionFactory">
   <property name="brokerURL" value="${amqbroker.host}:${amqbroker.port}" />
   <property name="userName" value="${amqbroker.username}"/>
   <property name="password" value="${amqbroker.password}"/>
</bean>
	
	<bean id="pooledConnectionFactory"
   class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
   <property name="maxConnections" value="${amq.maxConnections}" />
   <property name="connectionFactory" ref="jmsConnectionFactory" />
</bean>
 
<bean id="jmsConfig"
   class="org.apache.camel.component.jms.JmsConfiguration">
   <property name="connectionFactory" ref="pooledConnectionFactory"/>
   <property name="concurrentConsumers" value="${amq.concurrentConsumers}"/>
   <property name="mapJmsMessage" value="${amq.mapJmsMessage}" />
   <property name="maxConcurrentConsumers" value="${amq.maxConcurrentConsumers}" />
   <property name="asyncConsumer" value="${amq.asyncConsumer}" />
   <property name="asyncStartListener" value="${amq.asyncStartListener}" />
   
</bean>
 
<bean id="activemq"
    class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="configuration" ref="jmsConfig"/>
    <property name="transacted" value="${amq.transacted}"/>
    <property name="cacheLevelName" value="${amq.cacheLevelName}" />
</bean>

	<camelContext streamCache="true" id="VehicleInfoService" xmlns="http://camel.apache.org/schema/blueprint">
  <dataFormats>
    <xmljson forceTopLevelObject="true" skipWhitespace="true" trimSpaces="true" skipNamespaces="true" removeNamespacePrefixes="true" id="VehicleInfoJsonXML"/>
    <xmljson forceTopLevelObject="true" skipWhitespace="true" trimSpaces="true" skipNamespaces="true" removeNamespacePrefixes="true" id="VehicleInfoxmlJson"/>
  </dataFormats>
  <route id="VehicleInfoRoute">
    <from uri="cxfrs:bean:vehicleInfoEndpoint?continuationTimeout=15000" id="VehicleInfoEndPoint">
      <description/>
    </from>
    <log message="Vehicle Info Input Request: ${body}" id="VehicleInfoLogger"/>
    <process ref="VehicleInfoReqProcessor" id="VehicleInfoReqProcessor"/>
    <log message="Vehicle Info Present header carInfoPresent  :  ${header.carInfoPresent}" id="Vehicle"/>
    <choice id="HealthQuoteDecision">
      <when id="carInfoPresentYES">
        <simple>${header.carInfoPresent} == true</simple>
        <log message="Vehicle Info Present in DB " id="VehicleInfoLoggerYES"/>
    	<!-- <process ref="GetOurMasterData" id="GetOurMasterDataProcessor"/> -->
        <process ref="VehicleInfoResposneProcessor" id="VehicleInfoResProcessor"/>
        <marshal>
          <json prettyPrint="true" library="Jackson"/>
        </marshal>
      </when>
      <when id="carInfoPresentNO">
        <simple>${header.carInfoPresent} == false</simple>
        <log message="Vehicle Info not Present in DB " id="VehicleInfoLoggerNO"/>
        <to pattern="InOut" uri="xpathmapper://xpathmapdata" id="VehicleReqMapper"/>
        <unmarshal ref="VehicleInfoJsonXML" id="VehicleJsontoXML"/>
        <process ref="VehicleInfoRequest" id="VehicleInfoRequestProcessor"/>
        <to pattern="InOut" uri="webservconsumer://invoke" id="CarApiHealthQUOTEURL"/>
        <process ref="VehicleInfoResponseValidator" id="VehicleInfoResponseValidator"/>
        <process ref="GetOurMasterData" id="GetOurMasterDataProcessor"/>
        <multicast id="DBStore">
     	 <pipeline>
        	<process ref="DBStoreReqResProcessor" id="DBStoreReqResProcessor"/>
        	</pipeline>
        <pipeline>
        <process ref="VehicleInfoResposneProcessor" id="VehicleInfoResProcessor"/>
        <marshal>
          <json prettyPrint="true" library="Jackson"/>
        </marshal>
        </pipeline>
        </multicast>
      </when>
    </choice>
  </route>
</camelContext>
</blueprint>
