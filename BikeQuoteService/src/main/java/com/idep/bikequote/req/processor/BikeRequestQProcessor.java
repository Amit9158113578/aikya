package com.idep.bikequote.req.processor;import com.couchbase.client.java.document.json.JsonObject;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.node.ArrayNode;import com.idep.bikequote.exception.processor.ExecutionTerminator;import com.idep.bikequote.util.BikeQuoteConstants;import com.idep.couchbase.api.impl.CBInstanceProvider;import com.idep.couchbase.api.impl.CBService;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.apache.log4j.Logger;public class BikeRequestQProcessor implements Processor {  static ObjectMapper objectMapper = new ObjectMapper();    static Logger log = Logger.getLogger(BikeRequestQProcessor.class.getName());    static JsonNode docConfigNode = (JsonNode)objectMapper.createObjectNode();    static {    CBService serverConfigService = CBInstanceProvider.getServerConfigInstance();    try {      docConfigNode = objectMapper.readTree(((JsonObject)serverConfigService.getDocBYId("LogConfiguration").content()).toString());    } catch (Exception e) {      log.info("Failed to load Log Config Document" + e);    }   }    public void process(Exchange exchange) throws Exception {    try {      String message = exchange.getIn().getBody().toString();      JsonNode qMsgNode = objectMapper.readTree(message);      log.info("BikeRequestQProcessor input request : "+qMsgNode+"  docConfigNode :"+docConfigNode);      String responseCode = qMsgNode.get(BikeQuoteConstants.QUOTE_RES_CODE).asText();      exchange.getIn().setHeader(BikeQuoteConstants.QUOTE_RES_CODE, responseCode);      exchange.setProperty(BikeQuoteConstants.UI_BIKEQUOTEREQUEST, qMsgNode);      exchange.setProperty("messageId", qMsgNode.get("uniqueKey").textValue());      if (responseCode.equals("P365RES100")) {        JsonNode qMsgDataNode = qMsgNode.get(BikeQuoteConstants.QUOTE_RES_DATA);        exchange.getIn().setHeader("clientDataFound", "Yes");        exchange.getIn().setBody(qMsgDataNode);        exchange.setProperty("defaultLogdata", init(qMsgNode));        exchange.setProperty(BikeQuoteConstants.QUOTE_ID, qMsgNode.get(BikeQuoteConstants.QUOTE_ID).textValue());        //exchange.setProperty("encryptedQuoteId", qMsgNode.get(BikeQuoteConstants.QUOTE_RES_DATA).get("encryptedQuoteId").textValue());        exchange.setProperty("logReq", "Bike|" + qMsgNode.findValue(BikeQuoteConstants.DROOLS_CARRIERID).asText() + "|" + "Quote" + "|" + exchange.getProperty(BikeQuoteConstants.QUOTE_ID).toString() + "|");      } else {        exchange.getIn().setHeader("clientDataFound", "No");        log.info("clientDataFound after input request : "+qMsgNode);        exchange.getIn().setBody(qMsgNode);      }     } catch (Exception e) {      log.error(BikeRequestQProcessor.class + " - " + Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "- BikeRequestQProcessor : " + e);      throw new ExecutionTerminator();    }   }    public String init(JsonNode quoteReqNode) {    String logData = new String();    ArrayNode logNode = (ArrayNode)docConfigNode.get("logFields");    String seperator = docConfigNode.get("seperateBy").asText();    try {      if (docConfigNode.has("defaultValue")) {        logData = logData.concat(docConfigNode.get("defaultValue").asText());        logData = logData.concat(seperator);      }       for (JsonNode node : logNode) {        if (quoteReqNode.findPath(node.asText()) == null) {          logData = logData.concat(seperator);          continue;        }         if (node.asText().equalsIgnoreCase("quoteType")) {          if (docConfigNode.get("businessList").get(quoteReqNode.findPath(node.asText()).asText()) != null) {            log.info("logging :" + docConfigNode.get("businessList").get(quoteReqNode.findPath(node.asText()).asText()).asText());            logData = logData.concat(docConfigNode.get("businessList").get(quoteReqNode.findPath(node.asText()).asText()).asText());            logData = logData.concat(seperator);          }           continue;        }         logData = logData.concat(quoteReqNode.findPath(node.asText()).asText());        logData = logData.concat(seperator);      }     } catch (Exception e) {      log.error("Error occurred while processing logging details ", e);    }     return logData;  }}