<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
	xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
        http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
	
	<cxf:rsServer id="BikeProposalServiceEndpoint" address="/bikeproposal" serviceClass="com.idep.proposal.service.BikeProposalService" loggingFeatureEnabled="true">
		<cxf:providers>
			<bean class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />
		</cxf:providers>
	</cxf:rsServer>
	
	<camelContext trace="false" streamCache="true" threadNamePattern="BIKEPROP#counter#" id="BikeProposalServiceContext"
		xmlns="http://camel.apache.org/schema/blueprint">
		<onException>
			<exception>java.net.SocketTimeoutException</exception>
			<exception>java.net.SocketException</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log message="Bike proposal service seems to be down" />
			<process ref="ProposalExceptionProcessor" customId="true" id="ProposalExceptionProcessor" />
		</onException>
		<onException>
			<exception>org.apache.camel.component.http4.HttpOperationFailedException</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log message="Bike proposal Http Operation Failed : check input provided" />
			<process ref="ProposalExceptionProcessor" customId="true" id="HttpOperationFailedException" />
		</onException>
		<onException>
			<exception>com.idep.proposal.exception.processor.ExecutionTerminator</exception>
			<exception>java.lang.Exception</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log message="Bike proposal process terminated" />
			<process ref="ProposalExceptionProcessor" customId="true" id="ExecutionTerminator" />
			 <bean ref="BikeProposalServiceImpl" method="sendMessage" />
		</onException>
		<route id="BikeProposalRoute">
			<from uri="cxfrs:bean:BikeProposalServiceEndpoint" />
			<choice id="PolicyProposalDecision">
				<when id="BikeProposalReq">
					<simple>${header.operationName} == "submitBikeProposal"</simple>
					<bean ref="BikeProposalServiceImpl" method="submitBikeProposal" id="BikeProposalSubmitReq" />
					<process ref="BikeProposalReqProcessor" id="BikeProposalReqProcessor" />
					<process ref="BikeProposalAddressProcessor" id="BikeProposalAddressProcessor" />
		           <multicast id="BikePropReq">
				    <pipeline id="proposalDBCreation">
					        <to uri="direct:proposalCreateRequest"/>
					</pipeline>
					  <pipeline id="serviceAPIInvoke">
					     <process ref="TransformServiceRequest" id="TransformServiceRequest" />
			                 <loop id="proposalServiceInvoke" >
			                     <header>noOfServiceInvoke</header>
			                       <choice id="validateProposalServiceInvokeStatus">
	 								 <when id="success">
								      <simple>${header.invokeservice} == "True"</simple>
                         		      <process ref="UpdateStageProcessor" id="TransformServiceRequest" />
               						  <process ref="BikeProposalLogProcessor" id="BikeProposalLogProcessor1" />
               						  <to pattern="InOut" uri="webservconsumer://invoke" id="soap_OR_restServiceInvoke" />
                					   <log message="response from invoke service:${body}"></log>
                					   <process ref="ValidateResponse" id="ValidateResponse" />
                					   <log message="response after ValidateResponse body:${body}"></log>
			                    	  </when>
			                        </choice>
			                  </loop>
			                  <choice id="validateResponse">
								    <when id="BikeProposalReq">
									      <simple>${header.carrierReqMapConf} == "Yes"</simple>
			                               <to pattern="InOut" uri="mapper://mapdata" id="mapperIfNoServiceInvoke" />
			                               <process ref="MapperResponseHandler" id="MapperResponseHandler" />
			                       </when>
			                  </choice>
			                   <multicast id="ProposalResponse">
								 <pipeline>
								   <process ref="ProposalReqDBStore" id="CarrierProposalReqDBstore" />
								</pipeline>
							  <pipeline>
			                		 <bean ref="BikeProposalServiceImpl" method="sendMessage" />
							  </pipeline>
					    </multicast>
				  </pipeline>
			</multicast> 
		  </when>
	  </choice>
		 </route>
		 	<route id="createProposalRoute">
			<from uri="direct:proposalCreateRequest" />
			<log message="bike proposal create request : ${body}" />
			<process ref="BikeProposalDBReqProcessor" id="BikeProposalDBReqProcessor" />
            <to pattern="InOut" uri="joltTransformer://invoke" />
			<process ref="ProposalReqDBStore" id="ProposalReqDBStore" />
			<bean ref="BikeProposalServiceImpl" method="sendMessage" id="BikeProposalSubmitBase" />
			<log message="Proposal UI response : ${body}" />
		  </route> 
	</camelContext>

</blueprint>
